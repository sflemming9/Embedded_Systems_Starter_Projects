/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Thu Sep 21 10:24:27 2017. */

#ifndef PB_DATA_PB_H_INCLUDED
#define PB_DATA_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _DataMessage {
    bool has_regen_enabled;
    uint32_t regen_enabled;
    bool has_regen_command;
    uint32_t regen_command;
    bool has_battery_power;
    uint32_t battery_power;
    bool has_array_power;
    float array_power;
    bool has_reverse_on;
    uint32_t reverse_on;
    bool has_low_volt_power;
    float low_volt_power;
    bool has_cell_read_error;
    int32_t cell_read_error;
    bool has_cell_bleed;
    uint32_t cell_bleed;
    bool has_cruise_speed;
    float cruise_speed;
    bool has_hazard_lights_on;
    int32_t hazard_lights_on;
    bool has_battery_voltage;
    float battery_voltage;
    bool has_ltc6804_badpec;
    uint32_t ltc6804_badpec;
    bool has_bms_state;
    uint32_t bms_state;
    bool has_charge_enabled;
    int32_t charge_enabled;
    bool has_discharge_enabled;
    int32_t discharge_enabled;
    bool has_highside_contactor_on;
    int32_t highside_contactor_on;
    bool has_lowside_contactor_on;
    int32_t lowside_contactor_on;
    bool has_precharge_on;
    int32_t precharge_on;
    bool has_low_volt_bus_on;
    int32_t low_volt_bus_on;
    bool has_battery_temp_1;
    float battery_temp_1;
    bool has_battery_temp_2;
    float battery_temp_2;
    bool has_battery_temp_3;
    float battery_temp_3;
    bool has_battery_temp_4;
    float battery_temp_4;
    bool has_battery_temp_5;
    float battery_temp_5;
    bool has_battery_temp_6;
    float battery_temp_6;
    bool has_bms_precharge_battery_adc;
    float bms_precharge_battery_adc;
    bool has_bms_precharge_car_adc;
    float bms_precharge_car_adc;
    bool has_low_volt_output_current;
    float low_volt_output_current;
    bool has_array_current;
    float array_current;
    bool has_battery_current;
    float battery_current;
    bool has_left_motor_controller_power;
    float left_motor_controller_power;
    bool has_right_motor_controller_power;
    float right_motor_controller_power;
    bool has_amp_hours;
    float amp_hours;
    bool has_head_lights_on;
    int32_t head_lights_on;
    bool has_brake_lights_on;
    int32_t brake_lights_on;
    bool has_right_blinker_on;
    int32_t right_blinker_on;
    bool has_left_blinker_on;
    int32_t left_blinker_on;
    bool has_brake_pressed;
    int32_t brake_pressed;
    bool has_throttle_pressed;
    int32_t throttle_pressed;
    bool has_drive_mode;
    uint32_t drive_mode;
    bool has_motor_controller_enabled;
    int32_t motor_controller_enabled;
    bool has_motor_controller_speed;
    float motor_controller_speed;
    bool has_motor_controller_rpm;
    float motor_controller_rpm;
    bool has_avg_odometer;
    float avg_odometer;
    bool has_left_motor_temp;
    float left_motor_temp;
    bool has_right_motor_temp;
    float right_motor_temp;
    bool has_left_motor_controller_temp;
    float left_motor_controller_temp;
    bool has_right_motor_controller_temp;
    float right_motor_controller_temp;
    bool has_left_motor_controller_alive;
    float left_motor_controller_alive;
    bool has_right_motor_controller_alive;
    float right_motor_controller_alive;
    bool has_left_motor_controller_current;
    float left_motor_controller_current;
    bool has_right_motor_controller_current;
    float right_motor_controller_current;
    bool has_motor_controller_current_diff;
    float motor_controller_current_diff;
    bool has_left_motor_controller_error;
    uint32_t left_motor_controller_error;
    bool has_right_motor_controller_error;
    uint32_t right_motor_controller_error;
    bool has_left_motor_controller_limit;
    uint32_t left_motor_controller_limit;
    bool has_right_motor_controller_limit;
    uint32_t right_motor_controller_limit;
    bool has_left_motor_controller_rx_error_count;
    uint32_t left_motor_controller_rx_error_count;
    bool has_right_motor_controller_rx_error_count;
    uint32_t right_motor_controller_rx_error_count;
    bool has_left_motor_controller_tx_error_count;
    uint32_t left_motor_controller_tx_error_count;
    bool has_right_motor_controller_tx_error_count;
    uint32_t right_motor_controller_tx_error_count;
    bool has_left_motor_controller_bus_voltage;
    float left_motor_controller_bus_voltage;
    bool has_right_motor_controller_bus_voltage;
    float right_motor_controller_bus_voltage;
    bool has_left_motor_controller_15v_voltage;
    float left_motor_controller_15v_voltage;
    bool has_right_motor_controller_15v_voltage;
    float right_motor_controller_15v_voltage;
    bool has_left_motor_controller_3v3_voltage;
    float left_motor_controller_3v3_voltage;
    bool has_right_motor_controller_3v3_voltage;
    float right_motor_controller_3v3_voltage;
    bool has_left_motor_controller_1v9_voltage;
    float left_motor_controller_1v9_voltage;
    bool has_right_motor_controller_1v9_voltage;
    float right_motor_controller_1v9_voltage;
    bool has_left_motor_controller_dsp_temp;
    float left_motor_controller_dsp_temp;
    bool has_right_motor_controller_dsp_temp;
    float right_motor_controller_dsp_temp;
    bool has_left_motor_controller_phase_current;
    float left_motor_controller_phase_current;
    bool has_right_motor_controller_phase_current;
    float right_motor_controller_phase_current;
    bool has_left_motor_rpm_command;
    float left_motor_rpm_command;
    bool has_right_motor_rpm_command;
    float right_motor_rpm_command;
    bool has_left_motor_current_command;
    float left_motor_current_command;
    bool has_right_motor_current_command;
    float right_motor_current_command;
    bool has_gps_time;
    int64_t gps_time;
    bool has_gps_latitude;
    float gps_latitude;
    bool has_gps_longitude;
    float gps_longitude;
    bool has_gps_speed;
    float gps_speed;
    bool has_gps_altitude;
    float gps_altitude;
    bool has_gps_bearing;
    float gps_bearing;
    bool has_led_state;
    int32_t led_state;
    bool has_mppt_array_power;
    float mppt_array_power;
    bool has_mppt_A0_volt_in;
    float mppt_A0_volt_in;
    bool has_mppt_A0_volt_out;
    float mppt_A0_volt_out;
    bool has_mppt_A0_current;
    float mppt_A0_current;
    bool has_mppt_A0_temp;
    float mppt_A0_temp;
    bool has_mppt_A1_volt_in;
    float mppt_A1_volt_in;
    bool has_mppt_A1_volt_out;
    float mppt_A1_volt_out;
    bool has_mppt_A1_current;
    float mppt_A1_current;
    bool has_mppt_A1_temp;
    float mppt_A1_temp;
    bool has_mppt_B0_volt_in;
    float mppt_B0_volt_in;
    bool has_mppt_B0_volt_out;
    float mppt_B0_volt_out;
    bool has_mppt_B0_current;
    float mppt_B0_current;
    bool has_mppt_B0_temp;
    float mppt_B0_temp;
    bool has_mppt_B1_volt_in;
    float mppt_B1_volt_in;
    bool has_mppt_B1_volt_out;
    float mppt_B1_volt_out;
    bool has_mppt_B1_current;
    float mppt_B1_current;
    bool has_mppt_B1_temp;
    float mppt_B1_temp;
    bool has_mppt_C0_volt_in;
    float mppt_C0_volt_in;
    bool has_mppt_C0_volt_out;
    float mppt_C0_volt_out;
    bool has_mppt_C0_current;
    float mppt_C0_current;
    bool has_mppt_C0_temp;
    float mppt_C0_temp;
    bool has_mppt_C1_volt_in;
    float mppt_C1_volt_in;
    bool has_mppt_C1_volt_out;
    float mppt_C1_volt_out;
    bool has_mppt_C1_current;
    float mppt_C1_current;
    bool has_mppt_C1_temp;
    float mppt_C1_temp;
    bool has_mppt_D0_volt_in;
    float mppt_D0_volt_in;
    bool has_mppt_D0_volt_out;
    float mppt_D0_volt_out;
    bool has_mppt_D0_current;
    float mppt_D0_current;
    bool has_mppt_D0_temp;
    float mppt_D0_temp;
    bool has_mppt_D1_volt_in;
    float mppt_D1_volt_in;
    bool has_mppt_D1_volt_out;
    float mppt_D1_volt_out;
    bool has_mppt_D1_current;
    float mppt_D1_current;
    bool has_mppt_D1_temp;
    float mppt_D1_temp;
    bool has_cell_volt_1;
    float cell_volt_1;
    bool has_cell_volt_2;
    float cell_volt_2;
    bool has_cell_volt_3;
    float cell_volt_3;
    bool has_cell_volt_4;
    float cell_volt_4;
    bool has_cell_volt_5;
    float cell_volt_5;
    bool has_cell_volt_6;
    float cell_volt_6;
    bool has_cell_volt_7;
    float cell_volt_7;
    bool has_cell_volt_8;
    float cell_volt_8;
    bool has_cell_volt_9;
    float cell_volt_9;
    bool has_cell_volt_10;
    float cell_volt_10;
    bool has_cell_volt_11;
    float cell_volt_11;
    bool has_cell_volt_12;
    float cell_volt_12;
    bool has_cell_volt_13;
    float cell_volt_13;
    bool has_cell_volt_14;
    float cell_volt_14;
    bool has_cell_volt_15;
    float cell_volt_15;
    bool has_cell_volt_16;
    float cell_volt_16;
    bool has_cell_volt_17;
    float cell_volt_17;
    bool has_cell_volt_18;
    float cell_volt_18;
    bool has_cell_volt_19;
    float cell_volt_19;
    bool has_cell_volt_20;
    float cell_volt_20;
    bool has_cell_volt_21;
    float cell_volt_21;
    bool has_cell_volt_22;
    float cell_volt_22;
    bool has_cell_volt_23;
    float cell_volt_23;
    bool has_cell_volt_24;
    float cell_volt_24;
    bool has_cell_volt_25;
    float cell_volt_25;
    bool has_cell_volt_26;
    float cell_volt_26;
    bool has_cell_volt_27;
    float cell_volt_27;
    bool has_cell_volt_28;
    float cell_volt_28;
    bool has_cell_volt_29;
    float cell_volt_29;
    bool has_cell_volt_30;
    float cell_volt_30;
    bool has_cell_volt_31;
    float cell_volt_31;
    bool has_cell_volt_min;
    float cell_volt_min;
    bool has_cell_volt_max;
    float cell_volt_max;
    bool has_cell_volt_avg;
    float cell_volt_avg;
    bool has_cell_volt_diff;
    float cell_volt_diff;
    bool has_power_save_on;
    int32_t power_save_on;
    bool has_rearview_on;
    int32_t rearview_on;
    bool has_mic_enabled;
    int32_t mic_enabled;
    bool has_imu_temp;
    int32_t imu_temp;
    bool has_imu_magnet_x;
    int32_t imu_magnet_x;
    bool has_imu_magnet_y;
    int32_t imu_magnet_y;
    bool has_imu_magnet_z;
    int32_t imu_magnet_z;
    bool has_imu_gyro_x;
    int32_t imu_gyro_x;
    bool has_imu_gyro_y;
    int32_t imu_gyro_y;
    bool has_imu_gyro_z;
    int32_t imu_gyro_z;
    bool has_imu_accel_x;
    int32_t imu_accel_x;
    bool has_imu_accel_y;
    int32_t imu_accel_y;
    bool has_imu_accel_z;
    int32_t imu_accel_z;
    bool has_bms_left_motor_controller_current;
    float bms_left_motor_controller_current;
    bool has_bms_right_motor_controller_current;
    float bms_right_motor_controller_current;
    bool has_bms_motor_controller_current_sum;
    float bms_motor_controller_current_sum;
    bool has_packets_per_sec;
    float packets_per_sec;
/* @@protoc_insertion_point(struct:DataMessage) */
} DataMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define DataMessage_init_default                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define DataMessage_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define DataMessage_regen_enabled_tag            1
#define DataMessage_regen_command_tag            2
#define DataMessage_battery_power_tag            3
#define DataMessage_array_power_tag              4
#define DataMessage_reverse_on_tag               5
#define DataMessage_low_volt_power_tag           6
#define DataMessage_cell_read_error_tag          7
#define DataMessage_cell_bleed_tag               8
#define DataMessage_cruise_speed_tag             9
#define DataMessage_hazard_lights_on_tag         10
#define DataMessage_battery_voltage_tag          11
#define DataMessage_ltc6804_badpec_tag           12
#define DataMessage_bms_state_tag                13
#define DataMessage_charge_enabled_tag           14
#define DataMessage_discharge_enabled_tag        15
#define DataMessage_highside_contactor_on_tag    16
#define DataMessage_lowside_contactor_on_tag     17
#define DataMessage_precharge_on_tag             18
#define DataMessage_low_volt_bus_on_tag          19
#define DataMessage_battery_temp_1_tag           20
#define DataMessage_battery_temp_2_tag           21
#define DataMessage_battery_temp_3_tag           22
#define DataMessage_battery_temp_4_tag           23
#define DataMessage_battery_temp_5_tag           24
#define DataMessage_battery_temp_6_tag           25
#define DataMessage_bms_precharge_battery_adc_tag 26
#define DataMessage_bms_precharge_car_adc_tag    27
#define DataMessage_low_volt_output_current_tag  29
#define DataMessage_array_current_tag            30
#define DataMessage_battery_current_tag          31
#define DataMessage_left_motor_controller_power_tag 32
#define DataMessage_right_motor_controller_power_tag 33
#define DataMessage_amp_hours_tag                34
#define DataMessage_head_lights_on_tag           35
#define DataMessage_brake_lights_on_tag          36
#define DataMessage_right_blinker_on_tag         37
#define DataMessage_left_blinker_on_tag          38
#define DataMessage_brake_pressed_tag            39
#define DataMessage_throttle_pressed_tag         40
#define DataMessage_drive_mode_tag               41
#define DataMessage_motor_controller_enabled_tag 42
#define DataMessage_motor_controller_speed_tag   43
#define DataMessage_motor_controller_rpm_tag     44
#define DataMessage_avg_odometer_tag             45
#define DataMessage_left_motor_temp_tag          46
#define DataMessage_right_motor_temp_tag         47
#define DataMessage_left_motor_controller_temp_tag 48
#define DataMessage_right_motor_controller_temp_tag 49
#define DataMessage_left_motor_controller_alive_tag 50
#define DataMessage_right_motor_controller_alive_tag 51
#define DataMessage_left_motor_controller_current_tag 52
#define DataMessage_right_motor_controller_current_tag 53
#define DataMessage_motor_controller_current_diff_tag 54
#define DataMessage_left_motor_controller_error_tag 55
#define DataMessage_right_motor_controller_error_tag 56
#define DataMessage_left_motor_controller_limit_tag 57
#define DataMessage_right_motor_controller_limit_tag 58
#define DataMessage_left_motor_controller_rx_error_count_tag 59
#define DataMessage_right_motor_controller_rx_error_count_tag 60
#define DataMessage_left_motor_controller_tx_error_count_tag 61
#define DataMessage_right_motor_controller_tx_error_count_tag 62
#define DataMessage_left_motor_controller_bus_voltage_tag 63
#define DataMessage_right_motor_controller_bus_voltage_tag 64
#define DataMessage_left_motor_controller_15v_voltage_tag 65
#define DataMessage_right_motor_controller_15v_voltage_tag 66
#define DataMessage_left_motor_controller_3v3_voltage_tag 67
#define DataMessage_right_motor_controller_3v3_voltage_tag 68
#define DataMessage_left_motor_controller_1v9_voltage_tag 69
#define DataMessage_right_motor_controller_1v9_voltage_tag 70
#define DataMessage_left_motor_controller_dsp_temp_tag 71
#define DataMessage_right_motor_controller_dsp_temp_tag 72
#define DataMessage_left_motor_controller_phase_current_tag 73
#define DataMessage_right_motor_controller_phase_current_tag 74
#define DataMessage_left_motor_rpm_command_tag   75
#define DataMessage_right_motor_rpm_command_tag  76
#define DataMessage_left_motor_current_command_tag 77
#define DataMessage_right_motor_current_command_tag 78
#define DataMessage_gps_time_tag                 80
#define DataMessage_gps_latitude_tag             81
#define DataMessage_gps_longitude_tag            82
#define DataMessage_gps_speed_tag                83
#define DataMessage_gps_altitude_tag             84
#define DataMessage_gps_bearing_tag              85
#define DataMessage_led_state_tag                86
#define DataMessage_mppt_array_power_tag         87
#define DataMessage_mppt_A0_volt_in_tag          88
#define DataMessage_mppt_A0_volt_out_tag         89
#define DataMessage_mppt_A0_current_tag          90
#define DataMessage_mppt_A0_temp_tag             91
#define DataMessage_mppt_A1_volt_in_tag          92
#define DataMessage_mppt_A1_volt_out_tag         93
#define DataMessage_mppt_A1_current_tag          94
#define DataMessage_mppt_A1_temp_tag             95
#define DataMessage_mppt_B0_volt_in_tag          96
#define DataMessage_mppt_B0_volt_out_tag         97
#define DataMessage_mppt_B0_current_tag          98
#define DataMessage_mppt_B0_temp_tag             99
#define DataMessage_mppt_B1_volt_in_tag          100
#define DataMessage_mppt_B1_volt_out_tag         101
#define DataMessage_mppt_B1_current_tag          102
#define DataMessage_mppt_B1_temp_tag             103
#define DataMessage_mppt_C0_volt_in_tag          104
#define DataMessage_mppt_C0_volt_out_tag         105
#define DataMessage_mppt_C0_current_tag          106
#define DataMessage_mppt_C0_temp_tag             107
#define DataMessage_mppt_C1_volt_in_tag          108
#define DataMessage_mppt_C1_volt_out_tag         109
#define DataMessage_mppt_C1_current_tag          110
#define DataMessage_mppt_C1_temp_tag             111
#define DataMessage_mppt_D0_volt_in_tag          112
#define DataMessage_mppt_D0_volt_out_tag         113
#define DataMessage_mppt_D0_current_tag          114
#define DataMessage_mppt_D0_temp_tag             115
#define DataMessage_mppt_D1_volt_in_tag          116
#define DataMessage_mppt_D1_volt_out_tag         117
#define DataMessage_mppt_D1_current_tag          118
#define DataMessage_mppt_D1_temp_tag             119
#define DataMessage_cell_volt_1_tag              120
#define DataMessage_cell_volt_2_tag              121
#define DataMessage_cell_volt_3_tag              122
#define DataMessage_cell_volt_4_tag              123
#define DataMessage_cell_volt_5_tag              124
#define DataMessage_cell_volt_6_tag              125
#define DataMessage_cell_volt_7_tag              126
#define DataMessage_cell_volt_8_tag              127
#define DataMessage_cell_volt_9_tag              128
#define DataMessage_cell_volt_10_tag             129
#define DataMessage_cell_volt_11_tag             130
#define DataMessage_cell_volt_12_tag             131
#define DataMessage_cell_volt_13_tag             132
#define DataMessage_cell_volt_14_tag             133
#define DataMessage_cell_volt_15_tag             134
#define DataMessage_cell_volt_16_tag             135
#define DataMessage_cell_volt_17_tag             136
#define DataMessage_cell_volt_18_tag             137
#define DataMessage_cell_volt_19_tag             138
#define DataMessage_cell_volt_20_tag             139
#define DataMessage_cell_volt_21_tag             140
#define DataMessage_cell_volt_22_tag             141
#define DataMessage_cell_volt_23_tag             142
#define DataMessage_cell_volt_24_tag             143
#define DataMessage_cell_volt_25_tag             144
#define DataMessage_cell_volt_26_tag             145
#define DataMessage_cell_volt_27_tag             146
#define DataMessage_cell_volt_28_tag             147
#define DataMessage_cell_volt_29_tag             148
#define DataMessage_cell_volt_30_tag             149
#define DataMessage_cell_volt_31_tag             150
#define DataMessage_cell_volt_min_tag            151
#define DataMessage_cell_volt_max_tag            152
#define DataMessage_cell_volt_avg_tag            153
#define DataMessage_cell_volt_diff_tag           154
#define DataMessage_power_save_on_tag            155
#define DataMessage_rearview_on_tag              156
#define DataMessage_mic_enabled_tag              157
#define DataMessage_imu_temp_tag                 158
#define DataMessage_imu_magnet_x_tag             159
#define DataMessage_imu_magnet_y_tag             160
#define DataMessage_imu_magnet_z_tag             161
#define DataMessage_imu_gyro_x_tag               162
#define DataMessage_imu_gyro_y_tag               163
#define DataMessage_imu_gyro_z_tag               164
#define DataMessage_imu_accel_x_tag              165
#define DataMessage_imu_accel_y_tag              166
#define DataMessage_imu_accel_z_tag              167
#define DataMessage_bms_left_motor_controller_current_tag 168
#define DataMessage_bms_right_motor_controller_current_tag 169
#define DataMessage_bms_motor_controller_current_sum_tag 170
#define DataMessage_packets_per_sec_tag          171

/* Struct field encoding specification for nanopb */
extern const pb_field_t DataMessage_fields[170];

/* Maximum encoded size of messages (where known) */
#define DataMessage_size                         1195

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DATA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
