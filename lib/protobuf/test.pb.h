/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Thu Sep 21 10:24:27 2017. */

#ifndef PB_TEST_PB_H_INCLUDED
#define PB_TEST_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _TestMessage {
    int32_t a;
    bool has_b;
    int32_t b;
    bool has_c;
    int32_t c;
    bool has_d;
    int32_t d;
    bool has_e;
    int32_t e;
    bool has_f;
    int32_t f;
    bool has_g;
    int32_t g;
    bool has_h;
    int32_t h;
    bool has_i;
    int32_t i;
    bool has_j;
    int32_t j;
    bool has_k;
    int32_t k;
    bool has_l;
    int32_t l;
    bool has_m;
    int32_t m;
    bool has_n;
    int32_t n;
    bool has_o;
    int32_t o;
    bool has_p;
    int32_t p;
    bool has_q;
    int32_t q;
    bool has_r;
    int32_t r;
    bool has_s;
    int32_t s;
    bool has_t;
    int32_t t;
    bool has_u;
    int32_t u;
    bool has_v;
    int32_t v;
    bool has_w;
    int32_t w;
    bool has_x;
    int32_t x;
    bool has_y;
    int32_t y;
    bool has_z;
    int32_t z;
/* @@protoc_insertion_point(struct:TestMessage) */
} TestMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define TestMessage_init_default                 {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define TestMessage_init_zero                    {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define TestMessage_a_tag                        1
#define TestMessage_b_tag                        2
#define TestMessage_c_tag                        3
#define TestMessage_d_tag                        4
#define TestMessage_e_tag                        5
#define TestMessage_f_tag                        6
#define TestMessage_g_tag                        7
#define TestMessage_h_tag                        8
#define TestMessage_i_tag                        9
#define TestMessage_j_tag                        10
#define TestMessage_k_tag                        11
#define TestMessage_l_tag                        12
#define TestMessage_m_tag                        13
#define TestMessage_n_tag                        14
#define TestMessage_o_tag                        15
#define TestMessage_p_tag                        16
#define TestMessage_q_tag                        17
#define TestMessage_r_tag                        18
#define TestMessage_s_tag                        19
#define TestMessage_t_tag                        20
#define TestMessage_u_tag                        21
#define TestMessage_v_tag                        22
#define TestMessage_w_tag                        23
#define TestMessage_x_tag                        24
#define TestMessage_y_tag                        25
#define TestMessage_z_tag                        26

/* Struct field encoding specification for nanopb */
extern const pb_field_t TestMessage_fields[27];

/* Maximum encoded size of messages (where known) */
#define TestMessage_size                         297

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define TEST_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
