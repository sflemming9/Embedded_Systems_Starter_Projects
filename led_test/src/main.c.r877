// STM32F4 LED test
// IAR toolchain
// 72MHz sysclock w/8MHz crystal

#include "bsp.h"

#include <canrouter.h>
#include <stdio.h>
#include <stm32f4xx.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <pin.h>
#include <catalog.h>

// Put your LEDs here!
Pin LED[] = {
    {GPIOD, &RCC_AHB1PeriphClockCmd, GPIO_Pin_12, GPIO_PinSource12, RCC_AHB1Periph_GPIOD},
    {GPIOD, &RCC_AHB1PeriphClockCmd, GPIO_Pin_13, GPIO_PinSource13, RCC_AHB1Periph_GPIOD},
    {GPIOD, &RCC_AHB1PeriphClockCmd, GPIO_Pin_14, GPIO_PinSource14, RCC_AHB1Periph_GPIOD},
    {GPIOD, &RCC_AHB1PeriphClockCmd, GPIO_Pin_15, GPIO_PinSource15, RCC_AHB1Periph_GPIOD},
    {GPIOB, &RCC_AHB1PeriphClockCmd, GPIO_Pin_14, GPIO_PinSource14, RCC_AHB1Periph_GPIOB}
};

void LedTest(void* pvParameters)
{
  int num_leds = sizeof(LED)/sizeof(Pin);

  // Configure the LEDs
  for(int i = 0; i < num_leds; i++) {
      Pin_ConfigGpioPin(&(LED[i]), GPIO_Mode_OUT, GPIO_Speed_2MHz,
                        GPIO_OType_PP, GPIO_PuPd_DOWN, false);
  }
  
  while(true)
  {
    // Toggle the LEDs every second
    for(int i = 0; i < num_leds; i++) {
        Pin_Toggle(&(LED[i]));
    }
    vTaskDelay(1000);
  }
}

int main()
{
  // Startup housekeeping
  RCC_HSICmd(DISABLE);
  BSP_EnableCycleCounter();
  BSP_SetAllAnalog();
  //BSP_PrintStartupInfo();

  // Initialize CAN
  CAN_Config(&can, 500000, 256); // 125kbps, 256 item tx queue
  CAN_InitHwF(&can, 0, 0, true, 0); // HW filter 0 receives all extid packets

  // catInitializeCatalog(&cat, DEVICE_ID);
  // Add entries here
  //xTaskCreate(CatalogReceiveTask, (const signed char*)("CatalogReceiveTask"), 512, &cat, 1, NULL);
  //xTaskCreate(CatalogAnnounceTask, (const signed char *)("CatalogAnnounceTask"), 512, &cat, 1, NULL);
  xTaskCreate(LedTest, (const char *)("LedTest"), 512, NULL, 1, NULL);

  // Start the scheduler
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
  vTaskStartScheduler();

  // Should never get here
  while(true);
}
